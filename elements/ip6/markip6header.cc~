/*
 * markip6header.{cc,hh} -- element sets IP6 Header annotation
 * Eddie Kohler, Peilei Fan
 *
 * Copyright (c) 1999-2000 Massachusetts Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, subject to the conditions
 * listed in the Click LICENSE file. These conditions include: you must
 * preserve this copyright notice, and you cannot mention the copyright
 * holders in advertising related to the Software without their permission.
 * The Software is provided WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED. This
 * notice is a summary of the Click LICENSE file; the license in that file is
 * legally binding.
 */

#include <click/config.h>
#include "markip6header.hh"
#include <click/args.hh>
#include <clicknet/ip6.h>
#include <click/ip6address.hh>
CLICK_DECLS

MarkIP6Header::MarkIP6Header()
{
}

MarkIP6Header::~MarkIP6Header()
{
}

int
MarkIP6Header::configure(Vector<String> &conf, ErrorHandler *errh)
{
    _offset = 0;
    return Args(conf, this, errh).read_p("OFFSET", _offset).complete();
}

// This function checks whether the next value list, contains the given next value
bool
list_contains_value(Vector<uint8_t> list, uint8_t nxt) {
    for(int i = 0; i < list.size(); i++) {
        if (list[i] == nxt) {
            return true;
        }
    }
    return false;
}

Packet *
MarkIP6Header::simple_action(Packet *p)
{
    click_chatter("enter MarkIP6Header");
    const click_ip6 *ip6 = reinterpret_cast<const click_ip6 *>(p->data() + _offset);
    p->set_ip6_header(ip6); // it sets the ip6 header which is 40 bytes long
    click_chatter("ip6->ip6_ctlun.ip6_un1.ip6_un1_nxt = %i", ip6->ip6_ctlun.ip6_un1.ip6_un1_nxt);
    click_chatter("ip6->ip6_src = %s", IP6Address(ip6->ip6_src).unparse().c_str());
    click_chatter("exit MarkIP6Header");
    if (ip6->ip6_ctlun.ip6_un1.ip6_un1_nxt == 0) { // hop by hop header
        click_ip6_hbh *hop_by_hop_header = (click_ip6_hbh*) ip6++;    // step to the next header
        p->set_hbh_header((const unsigned char*) hop_by_hop_header);
        uint8_t nxt = hop_by_hop_header->ip6h_nxt;
        void* header = (void*) hop_by_hop_header + 1;
        if (nxt == 43 || nxt == 44 || nxt == 60 || nxt == 135) {
            Vector<uint8_t> nxt_seen_list;
            while (nxt == 60 || nxt == 43 || nxt == 44 || nxt == 135) {
                if (nxt == 43) {
                    click_ip6_rthdr *routing_header = (click_ip6_rthdr*) header;
                    // TODO now set the routing header pointer in the packet
                    nxt = routing_header->ip6r_nxt;
                    if (!list_contains_value(nxt_seen_list,nxt)) {
                        nxt_seen_list.push_back(nxt);
                    } else {
                        click_chatter("An error: we have seen the routing header twice"); // TODO remove this later
                                    // ERROR: we have seen the same nxt value twice, this is not allowed
                                    // push a packet on the second output
                    }
                    routing_header++;
                    header = (void*) routing_header;
                    
                } else if (nxt == 44) {
                    click_ip6_fragment *fragment_header = (click_ip6_fragment*) header;
                    // TODO set the fragment header pointer in the packet
                    nxt = fragment_header->ip6_frag_nxt;
                    if (!list_contains_value(nxt_seen_list,nxt)) {
                        nxt_seen_list.push_back(nxt);
                    } else {
                        click_chatter("An error: we have seen the fragment header twice"); // TODO remove this later                    
                                    // ERROR: we have seen the same nxt value twice, this is not allowed
                                    // push a packet on the second output                    
                    }
                    
                    fragment_header++;
                    header = (void*) fragment_header;
                } else if (nxt == 60) {
                    click_ip6_dest *destination_header = (click_ip6_dest*) header;
                    // TODO set the destination header pointer in the packet
                    nxt = destination_header->ip6d_nxt;
                    if (!list_contains_value(nxt_seen_list,nxt)) {
                        nxt_seen_list.push_back(nxt);
                    } else {
                        click_chatter("An error: we have seen the routing header twice"); // TODO remove this later
                                    // ERROR: we have seen the same nxt value twice, this is not allowed
                                    // push a packet on a the second output
                    }
                    destination_header++;
                    header = (void*) destination_header;
                } else if (nxt == 135) {
                    
                } else {
                    break;  // quit the while loop
                }
            }
        }
    } else if (ip6->ip6_ctlun.ip6_un1.ip6_un1_nxt == 60) { // destination options header
        click_ip6_dest *destination_header = (click_ip6_dest*) ip6++;
 //       p->set_dest_header((const unsigned char*) destination_header);
    } else if (ip6->ip6_ctlun.ip6_un1.ip6_un1_nxt == 43) {  // routing header
        click_ip6_rthdr *routing_header = (click_ip6_rthdr*) ip6++;
   //     p->set_routing_header((const unsigned char*) routing_header);
    } else if (ip6->ip6_ctlun.ip6_un1.ip6_un1_nxt == 44) {  // fragment header
        click_ip6_fragment *fragment_header = (click_ip6_fragment*) ip6++;
   //     p->set_fragment_header((const unsigned char*) fragment_header);
    } else if (ip6->ip6_ctlun.ip6_un1.ip6_un1_nxt == 135) { // mobility header
//        click_ip6_mobility ip6_mobility = (click_ip6_mobility) ip6 + 1;
    }
    return p;
}




CLICK_ENDDECLS
EXPORT_ELEMENT(MarkIP6Header)
